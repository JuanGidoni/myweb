name: Deploy to GitHub Pages

# Trigger the workflow on every push to the master branch
on:
  push:
    branches:
      - master

permissions:
  contents: read # To read repository contents
  pages: write # To deploy to GitHub Pages
  id-token: write # Required for OIDC authentication

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 3: Build the project
      - name: Build the project
        run: npm run build

      # Step 4: Setup GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # Step 5: Upload build artifacts to GitHub Pages
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./dist" # Ensure this matches the location of your build output

      # Step 6: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

      # Step 7: Optional - Comment on the success or failure of the deployment
      - name: Comment on Success or Failure Deploy
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;

            // Try to get GitHub Pages information (handle potential errors gracefully)
            let pages;
            try {
              pages = await github.repos.getPages({ owner, repo });
            } catch (error) {
              console.log("Failed to retrieve Pages information. It may not be deployed yet.");
              pages = null;
            }

            const pagesUrl = pages && pages.data.html_url ? pages.data.html_url : null;
            const status = pages && pages.data.status ? pages.data.status : 'unknown';
            const sha = context.sha;
            const login = context.actor;
            const commitUrl = `https://github.com/${owner}/${repo}/commit/${sha}`;
            const actionUrl = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;

            // Generate the comment based on the deployment status
            let comment = ":x: Failed to deploy to GitHub Pages.";
            if (pagesUrl) {
              comment = status === 'built'
                ? `:rocket: Successfully deployed to [GitHub Pages](${pagesUrl})!`
                : `:x: Failed to deploy to [GitHub Pages](${pagesUrl})!`;
            }

            // Create a body for the comment
            const body = `### Deploy to GitHub Pages\n\n${comment}\n\n- **Status:** ${status}\n- **Commit:** [${sha.slice(0, 7)}](${commitUrl})\n- **Author:** [${login}](https://github.com/${login})\n- **Workflow:** [View Workflow](${actionUrl})`;

            // Post the comment
            await github.issues.createComment({
              owner,
              repo,
              issue_number: context.issue.number,
              body
            });

      # Step 8: Clean up the artifacts
      - name: Cleanup
        run: rm -rf dist
